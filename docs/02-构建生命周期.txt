							构建生命周期
生命周期
生命周期，从出生到死亡，依次所经历的各个阶段。

Maven生命周期
Maven的一次构建称为一个生命周期，是由一组精心设计的有序阶段组成。如clean、compile、package、install等。

目标
每个阶段可以注册（绑定）一些目标，来完成你要做的事情。

构建过程
整个构建过程就是，依次经历预定义好的所有有序阶段，并运行每个阶段所注册的目标。
即按照顺序依次做所有预先安排好的事情。

一点思考：
生命周期的所有阶段都已经预先定义好了，阶段本身并不做任何事情，做事情的那个东西叫做目标。
把合适的目标绑定到适合的阶段，执行时，流程依次经过每个阶段，若阶段绑定有目标，则执行目标，
然后进入下一阶段，若阶段没有绑定目标，直接进入下一阶段。

其实就是个流程。去医院看病，挂号，科室排队，询问病情，开检查单，去做检查，看检查结果，开药，缴费，取药。

三种标准生命周期
Maven中有三种标准的生命周期：清理（clean），默认（default）(构建)，和站点（site）。

clean生命周期（clean）
包含三个阶段，pre-clean、clean、post-clean。

pre-clean阶段打印提示信息或执行备份，clean阶段执行删除，post-clean阶段打印结果信息。

Clean插件
包含一个clean目标，来具体执行删除。

clean:clean，第一个clean是插件的名字，第二个clean是插件包含的目标。指clean插件的clean目标。

mvn clean，这里的clean指的是clean阶段。

执行mvn clean时，会依次执行pre-clean阶段、clean阶段。post-clean阶段由于在之后，所以不会执行。

因pre-clean阶段默认没有注册任何目标，所以没有实际的动作发生。

而clean阶段默认注册了clean:clean，所以会删除target目录。

说明一点：
每个阶段可以注册多个目标。


默认生命周期（default）
它是一个软件应用程序构建过程的总体模型。

validate		验证项目是否正确，以及所有为了完整构建必要的信息是否可用
generate-sources	生成所有需要包含在编译过程中的源代码
process-sources		处理源代码，比如过滤一些值
generate-resources	生成所有需要包含在打包过程中的资源文件
process-resources	复制并处理资源文件至目标目录，准备打包
compile			编译项目的源代码
process-classes		后处理编译生成的文件，例如对Java类进行字节码增强（bytecode enhancement）
generate-test-sources	生成所有包含在测试编译过程中的测试源码
process-test-sources	处理测试源码，比如过滤一些值
generate-test-resources	生成测试需要的资源文件
process-test-resources	复制并处理测试资源文件至测试目标目录
test-compile		编译测试源码至测试目标目录
test			使用合适的单元测试框架运行测试。这些测试应该不需要代码被打包或发布
prepare-package		在真正的打包之前，执行一些准备打包必要的操作。这通常会产生一个包的展开的处理过的版本（将会在Maven 2.1+中实现）
package			将编译好的代码打包成可分发的格式，如JAR，WAR，或者EAR
pre-integration-test	执行一些在集成测试运行之前需要的动作。如建立集成测试需要的环境
integration-test	如果有必要的话，处理包并发布至集成测试可以运行的环境
post-integration-test	执行一些在集成测试运行之后需要的动作。如清理集成测试环境。
verify			执行所有检查，验证包是有效的，符合质量规范
install			安装包至本地仓库，以备本地的其它项目作为依赖使用
deploy			复制最终的包至远程仓库，共享给其它开发人员和项目（通常和一次正式的发布相关）

站点生命周期（site）
Maven不仅仅能从一个项目构建软件构件，它还能为一个或者一组项目生成项目文档和报告。

包含四个阶段，
pre-site
site
post-site
site-deploy

打包相关生命周期
打包对应的阶段是package，打包类型由POM文件中<packaging></packaging>标签决定，常用类型是jar、war、pom

JAR生命周期阶段和默认的目标
process-resources	resources:resources
compile			compiler:compile
process-test-resources	resources:testResources
test-compile		compiler:testCompile
test			surefire:test
package			jar:jar

说明一点：
这里的阶段是绑定了目标的阶段，有些阶段没有绑定目标所以看不出来。

POM生命周期阶段和默认的目标
package		site:attach-descriptor
install		install:install
deploy		deploy:deploy

WAR生命周期阶段和默认的目标
process-resources	resources:resources
compile			compiler:compile
process-test-resources	resources:testResources
test-compile		compiler:testCompile
test			surefire:test
package			war:war

通用生命周期目标
大部分你将要接触的生命周期共享一些通用生命周期目标，用来管理资源，运行测试，以及编译源代码。

Process Resources
大部分生命周期将resources:resources目标绑定到process-resources阶段。
处理资源并将资源复制到输出目录。
默认目录位置src/main/resources中的文件复制到target/classes。
Maven同时也会在资源上应用过滤器，能让你替换资源文件中的一些${}占位符。

Compile
大部分生命周期将compile:compile目标绑定到compile阶段。
调用javac，编译src/main/java中的所有内容至target/classes。
<source>1.7</source>
<target>1.7</target>
用来设置源码和目标JVM的版本。

Process Test Resources
resources:testResources目标绑定到process-test-resources阶段。
测试资源的默认位置为src/test/resources，默认的输出目录为target/test-classes。
你可以像过滤一般的资源那样过滤测试资源。

Test Compile
compile:testCompile目标绑定到test-compile阶段。
编译src/test/java中的源码至target/test-classes目录。

Test
surefire:test目标绑定到test阶段
Surefire默认的行为是寻找测试源码目录下所有以*Test结尾的类，以JUnit2测试的形式运行它们。
Surefire插件也可以配置成运行TestNG3单元测试。

运行过mvn test之后，你应该注意到Surefire在target/surefire-reports目录生成了许多报告。
该目录内每个Surefire插件运行过的测试都会有相关的两个文件：
一个是包含测试运行信息的XML文档，另一个是包含单元测试输出的文本文件。

如果你想要整个的跳过测试，你可以运行如下的命令：
mvn install -Dmaven.test.skip=true
maven.test.skip变量同时控制Compiler和Surefire插件，
如果你传入maven.test.skip，就等于告诉Maven整个的跳过测试。

Install
install:install目标绑定到install阶段
将项目的主要构件安装到本地仓库。

Deploy
deploy:deploy目标绑定到deploy阶段
将一个构件部署到远程Maven仓库，当你执行一次发布的时候通常需要更新远程仓库。
部署设置通常可以在用户单独的~/.m2/settings.xml中找到。