settings.xml存在于两个地方：

1.安装的地方：/conf/settings.xml

2.用户的目录：/.m2/settings.xml

前者又被叫做全局配置，后者被称为用户配置。如果两者都存在，它们的内容将被合并，并且用户范围的settings.xml优先。

如果你偶尔需要创建用户范围的settings，你可以简单的copy Maven安装路径下的settings到目录${user.home}/.m2。Maven默认的settings.xml是一个包含了注释和例子的模板，你可以快速的修改它来达到你的要求。

下面是settings下的顶层元素的一个概览：

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     <localRepository/>
 6     <interactiveMode/>
 7     <usePluginRegistry/>
 8     <offline/>
 9     <pluginGroups/>
10     <servers/>
11     <mirrors/>
12     <proxies/>
13     <profiles/>
14     <activeProfiles/>
15 </settings>

配置细节：

简单的值

一半以上的顶级settings元素师简单的值，代表了一直处于活跃的构建系统的元素的取值范围。

 

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     <localRepository>${user.home}/.m2/repository</localRepository>
 6     <interactiveMode>true</interactiveMode>
 7     <usePluginRegistry>false</usePluginRegistry>
 8     <offline>false</offline>
 9     ...
10 </settings>
复制代码
localRepository：这个值是构建系统的本地仓库的路径。默认的值是${user.home}/.m2/repository.如果一个系统想让所有登陆的用户都用同一个本地仓库的话，这个值是极其有用的。

interactiveMode：如果Maven要试图与用户交互来得到输入就设置为true，否则就设置为false，默认为true。

usePluginRegistry：如果Maven使用${user.home}/.m2/plugin-registry.xml来管理plugin的版本，就设置为true，默认为false。

offline：如果构建系统要在离线模式下工作，设置为true，默认为false。如果构建服务器因为网络故障或者安全问题不能与远程仓库相连，那么这个设置是非常有用的。

插件组

这个元素包含了一系列pluginGroup元素，每个又包含了一个groupId。当一个plugin被使用，而它的groupId没有被提供的时候，这个列表将被搜索。这个列表自动的包含了org.apache.maven.plugins和org.codehaus.mojo。

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     ...
 6     <pluginGroups>
 7         <pluginGroup>org.mortbay.jetty</pluginGroup>
 8     </pluginGroups>
 9     ...
10 </settings>
复制代码
例如，有了上面的配置，Maven命令行可以使用简单的命令执行org.morbay.jetty:jetty-maven-plugin:run，如下

mvn jetty:run

服务器

用来下载和部署的仓库是用POM中的repositories和distributionManagement元素来定义的。但是某些配置例如username和password就不应该随着pom.xml来分配了。这种类型的信息应该保存在构建服务器中的settings.xml中。

 

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     ...
 6     <servers>
 7     <server>
 8     <id>server001</id>
 9     <username>my_login</username>
10     <password>my_password</password>
11     <privateKey>${user.home}/.ssh/id_dsa</privateKey>
12     <passphrase>some_passphrase</passphrase>
13     <filePermissions>664</filePermissions>
14     <directoryPermissions>775</directoryPermissions>
15     <configuration></configuration>
16     </server>
17     </servers>
18     ...
19 </settings>
复制代码
id：这是Server的ID(不是登录进来的user)，与Maven想要连接上的repository/mirror中的id元素相匹配。

username，password：这两个元素成对出现，表示连接这个server需要验证username和password。

privateKey，passphrase：与前两个元素一样，这两个成对出现，分别指向了一个私钥(默认的是${user.home}/.ssh/id_dsa)和一个passphrase。passphrase和password元素可能在将来被客观化，但是现在必须以文本形式在settings.xml中设置。

filePermissions，directoryPermissions：当一个仓库文件或者目录在部署阶段被创建的时候，就必须用到权限许可。他们合法的值是三个数字，就像*nix中的文件权限，例如：664，775.

注意：如果你使用了一个私钥来登录server，那么password元素必须被省略，否则私钥将被忽视。

密码加密

一个新特征：服务器password和passphrase加密已经被升到2.1.0+

镜像

 

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     ...
 6     <mirrors>
 7         <mirror>
 8             <id>planetmirror.com</id>
 9             <name>PlanetMirror Australia</name>
10             <url>http://downloads.planetmirror.com/pub/maven2</url>
11             <mirrorOf>central</mirrorOf>
12         </mirror>
13     </mirrors>
14     ...
15 </settings>
复制代码
id，name：唯一的镜像标识和用户友好的镜像名称。id被用来区分mirror元素，并且当连接时候被用来获得相应的证书。

url：镜像基本的URL，构建系统敬将使用这个URL来连接仓库，而不是原来的仓库URL。

mirrorOf：镜像所包含的仓库的Id。例如，指向Maven central仓库的镜像(http://repo1.maven.org/maven2/)，设置这个元素为central。更多的高级映射例如repo1,repo2 或者*,!inhouse都是可以的。没必要一定和mirror的id相匹配。

代理

 

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     ...
 6     <proxies>
 7         <proxy>
 8             <id>myproxy</id>
 9             <active>true</active>
10             <protocol>http</protocol>
11             <host>proxy.somewhere.com</host>
12             <port>8080</port>
13             <username>proxyuser</username>
14             <password>somepassword</password>
15             <nonProxyHosts>*.google.com|ibiblio.org</nonProxyHosts>
16         </proxy>
17     </proxies>
18     ...
19 </settings>
复制代码
id：proxy的唯一标识，用来区别proxy元素。

active：当proxy被激活的时候为true。当申明的代理很多的时候，这个很有用，但是同一时间仅有一个被激活。

protocol，host，port：代理地址protocol://host:port的分散形式。

username，password：两个元素成对出现，提供连接proxy服务器时的认证。

nonProxyHosts：这里列出了不需要使用代理的hosts。列表的分隔符是proxy服务器想要的类型。上面例子使用了pipe分隔符，逗号分隔符也比较通用。

配置文件

settings.xml中的profile是pom.xml中的profile的简洁形式。它包含了激活(activation)，仓库(repositories)，插件仓库(pluginRepositories)和属性(properties)元素。profile元素仅包含这四个元素是因为他们涉及到整个的构建系统，而不是个别的POM配置。

如果settings中的profile被激活，那么它的值将重载POM或者profiles.xml中的任何相等ID的profiles。

激活(activation)

activations是profile的关键，就像POM中的profiles，profile的能力在于它在特定情况下可以修改一些值。而这些情况是通过activation来指定的。

 

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     ...
 6     <profiles>
 7         <profile>
 8             <id>test</id>
 9             <activation>
10                 <activeByDefault>false</activeByDefault>
11                 <jdk>1.5</jdk>
12                 <os>
13                     <name>Windows XP</name>
14                     <family>Windows</family>
15                     <arch>x86</arch>
16                     <version>5.1.2600</version>
17                 </os>
18                 <property>
19                     <name>mavenVersion</name>
20                     <value>2.0.3</value>
21                 </property>
22                 <file>
23                     <exists>${basedir}/file2.properties</exists>
24                     <missing>${basedir}/file1.properties</missing>
25                 </file>
26             </activation>
27             ...
28         </profile>
29     </profiles>
30     ...
31 </settings>
复制代码
如果所有指定的条件都达到了，那么，activation就被触发，而且不需要一次性全部达到。

jdk：在jdk元素中，activation有一个内建的，java版本检测。如果检测到jdk版本与期待的一样，那么就激活。在上面的例子中，1.5.0_06是满足的。

os：os元素可以定义一些上面所示的操作系统特定的属性。

property：如果Maven检测到相应的名值对的属性，那么，这个profile将被激活。

file：如果给定的文件存在，或者不存在那么将激活这个profile。

activation并不是唯一激活profile的途径。settings.xml中的activeProfile包含了profile的id。他们也可以通过命令行来显式的激活，例如-P test。

如果你想查看在一个构建过程中有哪些profile会被激活。就使用maven-help-plugin

mvn help:active-profiles

属性(properites)

Maven的属性是值占位符，就像Ant中的属性。如果X是一个属性的话，那么它的值在POM中可以使用${X}来进行任意地方的访问。他们来自于五种不同的风格，所有都可以从settings.xml文件中访问到。

1.env.X：使用“env.”前缀将会返回当前的环境变量。例如${env.PATH}就是使用了$path环境变量。

2.project.X：一个点“.”分割的路径，在POM中就是相关的元素的值。例如：<project><version>1.0</version></project>就可以通过${project.version}来访问。

3.settings.X：一个点“.”分割的路径，在settings.xml中就是相对应的元素的值，例如：<settings><offline>false</offline></settings>就可以通过${settings.offline}来访问。

4.Java系统属性：所有通过java.lang.System.getProperties()来访问的属性都可以像POM中的属性一样访问，例如：${java.home}

5.X：被<properties/>或者外部文件定义的属性，值可以这样访问${someVar}

 

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     ...
 6     <profiles>
 7         <profile>
 8             ...
 9             <properties>
10                 <user.install>${user.home}/our-project</user.install>
11             </properties>
12             ...
13         </profile>
14     </profiles>
15     ...
16 </settings>
复制代码
如果这个profile被激活，那么属性${user.install}就可以被访问了。

仓库(repositories)

仓库是Maven用来构筑构建系统的本地仓库的远程项目集合。它来自于被Maven叫做插件和依赖的本地仓库。不同的远程仓库包含不同的项目，当profile被激活，他们就会需找匹配的release或者snapshot构件。

 

复制代码
 1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
 2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
 4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
 5     ...
 6     <profiles>
 7         <profile>
 8         ...
 9         <repositories>
10             <repository>
11                 <id>codehausSnapshots</id>
12                 <name>Codehaus Snapshots</name>
13                 <releases>
14                     <enabled>false</enabled>
15                     <updatePolicy>always</updatePolicy>
16                     <checksumPolicy>warn</checksumPolicy>
17                 </releases>
18                 <snapshots>
19                     <enabled>true</enabled>
20                     <updatePolicy>never</updatePolicy>
21                     <checksumPolicy>fail</checksumPolicy>
22                 </snapshots>
23                 <url>http://snapshots.maven.codehaus.org/maven2</url>
24                 <layout>default</layout>
25             </repository>
26         </repositories>
27         <pluginRepositories>
28         ...
29         </pluginRepositories>
30         ...
31         </profile>
32     </profiles>
33     ...
34 </settings>
复制代码
releases，snapshots：这是各种构件的策略，release或者snapshot。因了这两个集合，POM可以在单个的仓库中不依赖于另外一个的策略而改变当前策略。例如：一个人可能只下载snapshot用来开发。

enable：true或者false，来标记仓库是否为各自的类型激活(release 或者 snapshot)。

updatePolicy：这个元素指明了更新的频率。Maven会比较本地POM与远程的时间戳。可选的项目为：always，daily，interval:X，nerver。

checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。

layout：在上面描述仓库的时候，我们提到他们有统一的布局。这完全正确。使用这个来表明它是default还是legacy。

插件仓库(plugin repositories)

仓库包含了两种重要类型的构件。第一种是用来做其他构件依赖的构件，这是在中央仓库中的大多数插件。另外一种类型的构件就是插件。Maven的插件本身就是一种特殊的构件。因此，插件仓库被从其他仓库中分离出来。无论怎么说，pluginRepositories元素模块的结构与repositories模块很相似。pluginRepository元素指向一个可以找到新插件的远程地址。

激活配置(Active Profiles)

 

复制代码
1 <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
2           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
3           xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
4             http://maven.apache.org/xsd/settings-1.0.0.xsd">
5     ...
6     <activeProfiles>
7         <activeProfile>env-test</activeProfile>
8     </activeProfiles>
9 </settings>
复制代码
settings.xml最后一个谜题是activeProfiles元素。它包含一系列的activeProfile元素，每个都有一个profile id的值，任何profile id被定义到activeProfile的profile将被激活，不管其他的环境设置怎么样。如果没有匹配的profile被找到，那么就什么事情也不做。例如：如果env-test是一个activeProfile，一个在pom.xml或者profile.xml中的具有相应id的profile将被激活。如果没有这样的profile被找到，就什么事也不做，一切照常。
























<?xml version="1.0" encoding="UTF-8"?>

<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <!--指定本地仓库存储路径。默认值为~/.m2/repository 即 ${user.home}/.m2/repository。 -->
  <localRepository>d:/.m2/repository</localRepository>

	<!--指定Maven是否需要和用户输入进行交互。true:需要与用户交互;false:使用一个合理的默认值。默认值为true。 -->
  <interactiveMode>true</interactiveMode>

  <!--指定是否使用plugin-registry.xml文件来管理插件版本。设为true表示使用。默认值为false。-->
  <usePluginRegistry>false</usePluginRegistry>

  <!--指定是否在离线模式下运行。设为true表示项目构建要在离线模式下运行，默认值为false。 -->
  <offline>false</offline>

	<!-- 指定插件groupId列表，用于搜索时插件的groupId没有明确规定。 -->
	<pluginGroups>
	 	<!-- 指定使用插件查找进一步的组标识符 -->
		<pluginGroup>com.micmiu.plugins</pluginGroup>
	</pluginGroups>

  <!-- 指定这台机器连接到网络的代理服务器的列表。除非另有规定（系统属性或命令行开关），
       列表中配置的第一代理将被激活使用。-->
  <proxies>
    <!-- 配置代理服务器的相关参数 -->
    <proxy>
    	<!-- 代理标识ID，默认值：default -->
      <id>micmiuProxy</id>
      <!-- 指定是否激活，默认值：true -->
      <active>true</active>
      <!-- 指定代理协议，默认值：http -->
      <protocol>http</protocol>
      <!-- 指定代理认证的用户名 -->
      <username>micmiu</username>
      <!-- 指定代理认证用户的密码 -->
      <password>mypwd</password>
      <!-- 指定代理服务器的主机名 -->
      <host>micmiu.com</host>
      <!-- 指定代理服务的端口 默认值：8080 -->
      <port>80</port>
      <!-- 指定不被代理的主机名列表。多个用|分隔。-->
      <nonProxyHosts>ctosun.com|ctosun.micmiu.com</nonProxyHosts>
    </proxy>
  </proxies>

  <!-- 这是一个认证配置的列表,系统内部根据配置的serverID使用。认证配置用于maven链接到远程服务-->
  <servers>
    <!-- 指定的身份认证信息用于连接到一个特定的服务器时，确定系统内的唯一的名称（简称下面的'id'属性）。-->
    <server>
    	<!-- 这是server的id（注意不是用户登陆的id）。该id与distributionManagement中repository元素的id必须要匹配。-->
      <id>micmiu-releases</id>
      <!-- 服务器认证的用户名 -->
      <username>michael</username>
      <!-- 服务器认证的用户对应的密码 -->
      <password>mypwd</password>
    </server>

    <!-- 另一个示例 私钥/密码 -->
    <server>
      <id>micmiu-snapshots</id>
      <!-- 认证时使用的私钥文件。 -->
      <privateKey>/home/micmiu/.ssh/id_dsa</privateKey>
      <!-- 认证时使用的私钥密码，没有密码就设为空 -->
      <passphrase>mypwd</passphrase>
      <!-- 目录被创建时的权限设置。其值对应了unix文件系统的权限，如664，或者775 -->
      <directoryPermissions>775</directoryPermissions>
      <!-- 仓库文件创建时的权限设置。其值对应了unix文件系统的权限，如664，或者775。 -->
      <filePermissions>664</filePermissions>
    </server>
  </servers>

  <!-- 指定镜像列表，用于从远程仓库下载资源 -->
  <mirrors>
    <!-- 指定仓库的镜像站点，代替一个给定的库。该镜像藏库有一个ID相匹配的mirrorOf元素。
         ID是用于继承和直接查找目的，必须是唯一的。-->
    <mirror>
    	<!--该镜像的唯一标识符。id用来区分不同的mirror元素。 -->
      <id>mirrorId</id>
      <!--被镜像的服务器的id，比如：central，不能和id匹配。-->
   		<mirrorOf>central</mirrorOf>
      <name>micmiu for dev.</name>
      <url>http://dev.micmiu.com/repo/maven2</url>
    </mirror>

  </mirrors>

  <!-- 这是一个可以在各种不同的方式激活的配置文件列表，并可以修改构建过程。在settings.xml中提供的信息，
       旨在提供本地机器允许建立在本地环境中工作的具体路径和库位置。有多种方式可以激活配置属性：一种在settings.xml中<activeProfiles>指定；
       另一种实质上依赖于系统属性，无论是匹配特定的属性值或只是测试到它的存在.配置文件也可以根据JDK版本的前缀进行激活，1.4 可以激活1.4.2_07
    注：对于在settings.xml中定义的配置，你仅限于指定资源仓库、插件仓库和用于插件在POM中变量的自由形式属性的定义 -->
  <profiles>
    <!-- 指定生成过程的介绍，使用一个或多个上述机制被激活。对于继承而言，激活通过<activatedProfiles/>或命令行配置文件，
         配置文件必须有一个唯一的ID。此配置文件的例子使用的JDK版本触发激活。-->
    <profile>
    	<!--该配置的唯一标识符。 -->
      <id>jdk-1.4</id>

			<!--自动触发配置文件的逻辑定义。Activation的逻辑配置决定了是否开启该profile。activation元素并不是激活profile的唯一方式。
			    settings.xml文件中的activeProfile元素可指定需要激活的profile的id。
			    profile也可以通过在命令行，使用-P标记和逗号分隔的列表来显式的激活 -->
      <activation>
      	<!--指定是否激活的标识 默认值为false-->
    		<activeByDefault>false</activeByDefault>

      	<!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有不是以1.4开头的JDK版本。-->
        <jdk>1.4</jdk>

        <!-- 当检测到匹配的操作系统属性时，指定该配置文件将被激活， -->
       	<os>
		     	<!--激活profile的操作系统的名字 -->
		     	<name>windows 7</name>
		     	<!--激活profile的操作系统所属家族(如 'windows')  -->
		     	<family>windows</family>
		    	<!--激活profile的操作系统体系结构  -->
		     	<arch>x86</arch>
		     	<!--激活profile的操作系统版本-->
		     	<version>6.1</version>
	    	</os>

	    	<!-- 检测系统对应的属性和值(该值可在POM中通过${属性名称}引用)，配置就会被激活。
	    	    如果值字段是空的，那么存在属性名称字段就会激活 -->
		    <property>
		     	<!-- 属性的名称 -->
		     	<name>mavenVersion</name>
		     	<!-- 属性的值 -->
		    	<value>3.0.4</value>
		    </property>
		    <!-- 通过检测该文件的是否存在来激活配置。missing检查文件是否存在，如果不存在则激活profile；exists则会检查文件是否存在，如果存在则激活。-->
		    <file>
		    	<!--如果指定的文件存在，则激活profile。 -->
		    	<exists>/usr/local/micmiu/workspace/myfile</exists>
		    	<!--如果指定的文件不存在，则激活profile。-->
		    	<missing>/usr/local/micmiu/workspace/myfile</missing>
		    </file>
      </activation>

			<!-- 对应profile的扩展属性列表。Maven属性和Ant中的属性一样，可以用来存放一些值。这些值可以在POM中的任何地方使用标记${X}来使用，
			     这里X是指属性的名称。属性有五种不同的形式，并且都能在settings.xml文件中访问。
   					1. env.X: 表示系统环境变量。例如,"env.PATH" 等同于 $path环境变量（在Windows上是%PATH%）。
					  2. project.x：表示 POM中对应的属性值。
					  3. settings.x: 表示 settings.xml中对应属性值。
					  4. Java系统属性: 所有可通过java.lang.System.getProperties()访问的属性都能在POM中使用该形式访问。
					  5. x: 在<properties/>元素中，或者外部文件中设置，以${someVar}的形式使用。 -->
		 	<properties>
		  	<user.blog>www.micmiu.com</user.blog>
		  </properties>

    </profile>

    <!-- 这是另一个配置文件，根据系统属性来激活 -->
    <profile>
    	<!--该配置的唯一标识符。 -->
      <id>env-dev</id>
      <activation>
        <property>
        	<!-- 被用来激活配置文件的属性的名称 -->
          <name>target-env</name>
          <!-- 被用来激活配置文件的属性的值 -->
          <value>dev</value>
        </property>
      </activation>
      <!-- 指定配置文件的扩展配置 内容采取property.value的形式 -->
      <properties>
        <tomcatPath>/path/to/tomcat/instance</tomcatPath>
      </properties>
    </profile>

    <profile>
			<id>repo-dev</id>
			<!-- 配置远程仓库列表 -->
			<repositories>
				<!-- 远程仓库的配置信息 -->
				<repository>
					<!-- 远程仓库唯一标识-->
					<id>nexus</id>
					<!-- 远程仓库名称 -->
					<name>nexus for develop</name>
					<!-- 远程仓库URL -->
					<url>http://192.168.1.8:8080/nexus/content/groups/public/</url>
					<layout>default</layout>
					<releases>
						<!--是否使用这个资源库下载这种类型的构件 默认值：true-->
						<enabled>true</enabled>
						<!--指定下载更新的频率。这里的选项是：always（一直），daily（每日，默认值），interval：X（这里X是指分钟），或者never（从不）。 -->
			      <updatePolicy>daily</updatePolicy>
			      <!--当Maven验证构件校验文件失败时该怎么做fail（失败）或者warn（告警）。-->
			      <checksumPolicy>warn</checksumPolicy>
					</releases>
					<snapshots>
						<!--是否使用这个资源库下载这种类型的构件 默认值：true-->
						<enabled>true</enabled>
						<!--指定下载更新的频率。这里的选项是：always（一直），daily（每日，默认值），interval：X（这里X是指分钟），或者never（从不）。 -->
			      <updatePolicy>daily</updatePolicy>
			      <!--当Maven验证构件校验文件失败时该怎么做fail（失败）或者warn（告警）。-->
			      <checksumPolicy>warn</checksumPolicy>
					</snapshots>
				</repository>
			</repositories>
			<pluginRepositories>
				<pluginRepository>
					<id>nexus</id>
					<name>local nexus</name>
					<url>http://192.168.1.8:8080/nexus/content/groups/public</url>
					<layout>default</layout>
					<releases>
						<enabled>true</enabled>
					</releases>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</pluginRepository>
			</pluginRepositories>
		</profile>

  </profiles>

  <!-- 指定被激活的配置文件-->
  <activeProfiles>
    <activeProfile>repo-dev</activeProfile>
  </activeProfiles>
</settings>
